plugins {
    kotlin("multiplatform") version "{{kotlinVersion}}"
    id("org.jetbrains.dokka") version "2.0.0"
    id("com.vanniktech.maven.publish") version "0.34.0"

    `maven-publish`
    signing
}

group = "{{groupId}}"
version = "{{npmPackageVersion}}"
description = "{{description}}"

repositories {
    mavenCentral()
    mavenLocal()
}

kotlin {
    withSourcesJar()

    js {
        nodejs()
        binaries.library()
        generateTypeScriptDefinitions()
    }

    sourceSets {
        jsMain.dependencies {
            implementation(npm("{{npmPackageName}}", "{{npmPackageVersion}}"))
            {{dependencies}}
        }
    }
}

signing {
    val signingKey: String? by project
    val signingPassword: String? by project

    if (signingKey != null && signingPassword != null) {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign(publishing.publications)
    }
}

publishing {
    repositories {
        if (project.hasProperty("publishing.enabled") && project.property("publishing.enabled") == "true") {
            maven {
                name = project.findProperty("publishing.name") as? String ?: "{{npmPackageName}}".replace("[^A-Za-z0-9_\\-.]".toRegex(), "")
                url = uri(project.property("publishing.url") as String)

                if (project.hasProperty("publishing.username") && project.hasProperty("publishing.password")) {
                    credentials {
                        username = project.property("publishing.username") as String
                        password = project.property("publishing.password") as String
                    }
                }
            }
        }
    }  
}

if (project.hasProperty("publishing.enabled.central") && project.property("publishing.enabled.central") == "true") {
    mavenPublishing {
        coordinates(project.group.toString(), project.name, project.version.toString())

        publishToMavenCentral(true)
        signAllPublications()
    }
}